name: Luxury Events Data Collection

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  collect-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config file
      env:
        EVENTBRITE_API_KEY: ${{ secrets.EVENTBRITE_API_KEY }}
        MEETUP_API_KEY: ${{ secrets.MEETUP_API_KEY }}
        FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
      run: |
        cat > config.json << EOF
        {
          "api_keys": {
            "eventbrite": "$EVENTBRITE_API_KEY",
            "meetup": "$MEETUP_API_KEY",
            "facebook": "$FACEBOOK_ACCESS_TOKEN"
          },
          "target_cities": [
            "London", "Paris", "Milan", "Monaco", "Zurich", "Geneva",
            "Amsterdam", "Frankfurt", "Munich", "Vienna", "Barcelona",
            "Rome", "Florence", "Copenhagen", "Stockholm", "Brussels"
          ],
          "categories": [
            "fashion", "finance", "automotive", "food_wine", "real_estate"
          ],
          "collection_frequency": 24,
          "min_luxury_score": 6
        }
        EOF
        
    - name: Run data collection
      run: |
        python main.py
        
    - name: Generate dashboard
      run: |
        echo "Dashboard generated: status_dashboard.html"
        
    - name: Create stats API endpoint
      run: |
        mkdir -p api
        python -c "
import sqlite3
import json
from datetime import datetime

conn = sqlite3.connect('luxury_events.db')
cursor = conn.cursor()

# Get statistics
cursor.execute('SELECT COUNT(*) FROM events')
total_events = cursor.fetchone()[0]

cursor.execute('SELECT COUNT(*) FROM events WHERE luxury_score >= 8')
premium_events = cursor.fetchone()[0]

cursor.execute('SELECT COUNT(DISTINCT city) FROM events')
cities_covered = cursor.fetchone()[0]

conn.close()

stats = {
    'total_events': total_events,
    'premium_events': premium_events, 
    'cities_covered': cities_covered,
    'last_updated': datetime.now().isoformat(),
    'status': 'active'
}

with open('api/stats.json', 'w') as f:
    json.dump(stats, f, indent=2)
        "
        
    - name: Upload database artifact
      uses: actions/upload-artifact@v3
      with:
        name: luxury-events-database
        path: luxury_events.db
        retention-days: 30
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        
    - name: Update README badges
      run: |
        # Update README with latest statistics
        python -c "
import sqlite3
import re

# Get stats from database
conn = sqlite3.connect('luxury_events.db')
cursor = conn.cursor()
cursor.execute('SELECT COUNT(*) FROM events')
total_events = cursor.fetchone()[0]
cursor.execute('SELECT COUNT(*) FROM events WHERE luxury_score >= 8')
premium_events = cursor.fetchone()[0]
conn.close()

# Read current README
with open('README.md', 'r') as f:
    content = f.read()

# Update statistics in README (this would need more sophisticated regex)
print(f'Total Events: {total_events}')
print(f'Premium Events: {premium_events}')
        "
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add api/stats.json
        git add status_dashboard.html
        git diff --staged --quiet || (git commit -m "Update data and dashboard - $(date)" && git push)
        
  notify-status:
    needs: collect-data
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.collect-data.result }}" = "success" ]; then
          echo "✅ Data collection completed successfully"
        else
          echo "❌ Data collection failed"
        fi
